1. AWS lambda
    - aws lambda is a serverless compute which means we don't need to create or configure any servers, it is taken care by aws itself.
    - we can write code and deploy, aws take care of everything
    - aws lambda will not run automatically, we can need to configure an event...like from from cloudwatch or s3..etc.,
    - once the execution is completed it will tear down the infrastructure..it created..pay as u go..
    - each lambda function will have a role attached..role only define wht services lambda can access or not

2. benefits 
    - if we want we can increase the memory and execution time, we can do.
    - lambda can use 1000 concurrent function by default, we can set a concurrent limit to each function.
    - environment variables are key-value pairs, we can store the configuration settings & sensitive information
    - can we use to cloudwatch to monitor the execution

2. lambda supporting language
    - python
    - nodejs
    - java
    - go
    - .net core 
    - ruby

3. Limitation of lambda
    - The memory allocation for a Lambda function ranges from 128 MB to 10 GB
    - The maximum execution time for a Lambda function is 15 minutes (900 seconds)
    - The total size of environment variables cannot exceed 4 KB
    - disk capacity in the function container is between 512 MB to 10GB.
    - Lambda supports 1,000 concurrent executions per account per region.

    - the maximum size of compressed zip is 50.
    - size of uncompressed zip is 250 mb
    - can use /tmp directory to load other files at startup

4. reserved concurrency
    - we can set limit of lambda function, let say this lambda function
    only have 50 concurrent execution.
    - each invocation over the concurrency limit will throw a throttle error.

    for async invocation if it is went to throttle: it will keep on retry for 6 hours..retry interval between 1 seconds to 5 minutes.

5. what is cold start and how provision concurrency helps
    whenever the function is triggered for the first name or it is triggering back after the 
    long time..it will be slow execution..because it needs to intialize the code & dependencies..it will take some time ..

    using provision concurrency..we can set few lambda in always warm.
    
    and concurrency is allocated before the function is invoked.

6. lambda snapstart
    - improve your lambda performance upto to 10x and above for java
    - when enabled, function is invoked from pre-package state..

7. customation at CDN Content(edge) 

You can run custom JavaScript or Python/Node.js code at these edge locations to 
modify requests or responses based on your business logic (e.g., authentication,
 content personalization, A/B testing, geolocation-based routing
cloudfront function and lambda@edge..

cloudfront function(managed by cloudfront)
    - javascript code
    - handles millions of request per seconds
    - cloud front modify viewer request/viewer response
    - max execution time < 1 ms

lambda@edge
    - python or nodejs
    - thousad of request per seconds
    - cloudfront modify viewer request/viewer response and origin function and origin response
    - max.execution time 5-10 seconds

8. Lambda function in vpc.

    let say i want to access a rds database in a private subnet.it's inside a vpc..how will i do..

    1. first, while creating a lambda function..choose the vpc and select a private subnet and attach a security group.
    2. so this will create a eni in private subnet..with the help of eni lambda can access the rds database in private subnet

9. use rds proxy

    in the above case whenever the code is concurrently executed...lambda function will open a new connection in rds database.so there are too many
    open connection..database will have high latency...we can handles this using rds proxy..

    RDS proxy pools and manages connections, reducing the number of connections directly to the database..rds proxy will use existing connection for multiple invocations

10.RDS Invoking lambda and event notification

    - RDS can be configured to trigger a Lambda function, enabling actions like processing newly added records or sending notifications to users.

    - RDS Event Notifications allow you to monitor changes in the RDS environment, such as database instance creation, deletion, backups, or failures.
    you don't get information about the data.

11. API Gateway
    In API Gateway, we can create REST APIs to create methods like GET, POST, DELETE, and more. These methods can be configured to trigger an AWS Lambda function
    to handle the request and process the response.

    e.g..for get method..i will lambda function to get all the data..

12. STEP function

    build serverless visual workflow to orchestrate your lambda function.

    features: parallel, sequence, conditions, error handling..

    can intergrate with ec2,ecs, on-premise server, api Gateway, sqs queue etc.

    possibility for implementing human approval features.

13. Cognito
    give user identity to interact with our web or mobile
    * Cognito user pool - sign in functionality for app users.
    * Cognito identity pool - give aws credentails to users so they can access resorce temporary 

14. What are the main components of a Lambda function?
    - Handler : it's entry point for lambda function , specifies which function to be invoked.
    - Event  : input passed to lambda function, when it triggered..here we have inputs
    - context : contains runtime information such as function name, memory limit and execution time
    - environment variables: it holds the sensitive information of the lambda function

15. What are the different ways to invoke a Lambda Function?
    - API Gateway
    - Event Notifications
    - Cloud watch

16. Package Dependencies in aws lambda
    - Install the required libraries locally and create a deployment package that contains both dependencies and function code.
    - zip the deployment package and upload it aws lambda

17. Lambda layers
    - using lambda layer we will able to re-use the code and dependencies we used across multiple lambda function.
    - install dependencies locally and zip it and upload to layers..once u run the execution..with the dependencies in the layers
    u will able to run
    - we can 5 layers per lambda
    - instead of adding multiple zip files..we can use lambda layer

18. How can we deploy dependencies alongside Lambda code?
    - Lambda Layer
    - package dependencies
    - docker file 

19. How can we optimize the performance of Lambda functions?
    - set memory limit
    - set provisioned concurrency for snow start 
    - set the concurrency limit 
    - if the lambda is having dependencies, try to use lambda layer 
    - if it is java cod, try to use lambda snapstart

20. What tools can you use to monitor and debug Lambda functions?
    Amazon CloudWatch

21.Can Lambda functions call other Lambda functions?
    Yes, Lambda functions can call other Lambda functions.
    - synchronus invocation(RequestResponse)
        this will trigger another lambda function and wait for them to execute and once it is successful completed, it will continue
        import boto3

        client = boto3.client('lambda')

        response = client.invoke{
            FunctionName='MyOtherLambdaFunction',
            InvocationType='RequestResponse',  # This makes it synchronous
            Payload='{"key": "value"}'
        }
    - asynchrnus invocation
        this will trigger the another lambda function and doesn't wait for response.

        import boto3

        client = client.boto3('lambda')

        response = client.invoke{
            FunctionName='MyOtherLambdaFunction'
            InvocationType='Event'
            Payload='{"key":"value"}'
        }

22. How do you implement a simple REST API using Lambda and API Gateway?
    1. create a lambda function
    2. go to api Gateway -> create rest api -> use get method -> copy the arn paste there and save
    3. deploy the api 

23.How do you configure a Lambda function to process events from an S3 bucket?
    1. create a lambda function and attach a role, so that it can access.
    2. go to s3 bucket, in s3 bucket we have event notification
    3. choose the event type and configure the lambda


24. How do you configure a Lambda function to write data to a DynamoDB table?
    1. create a DynamoDB table with primary key and secondary key
    2. create a lambda function with role so that it can access the DynamoDB
    3. use DynamoDB SDK to access DynamoDB from the lambda
    4. use put item pass the attribute
    5. test 

25. How do you gradually shift traffic to a new version of a Lambda function?
    1. create a new version of lambda function
    2. create an alias records
    3. shift the traffic to the new version partially
    4. if working pass complete traffic

26. Can you explain how AWS Lambda handles retries in case of a function failure?
    use asynchronus invocation, this will retry for 6 hours..execution time between 1 seconds to 5 minutes

27. How does AWS Lambda handle versioning and aliases? Can you explain their purpose and how they are used?
    - each time we deploy a code, aws lambda will create a version of it..it's immuttable..meaning it will not change once it is published
    - alias is a pointer on that version 

28. What is the maximum execution timeout for an AWS Lambda function, and how would you handle long-running tasks that exceed this limit?
    15 minutes..if i want to handle i will use 
    1. step function that will handle large complex task.
    2. if it's always exceeding i will try to use ec2.
    3. i will use asynchronus invocation, even if it is faail..it will retry
    4. try to use lambda layer

29. lifecycle of a Lambda execution
    - initializtion phase
    - invocation phase
    - Shut down phase

30. SQS and lambda
 using sqs we can retry infinite times..if the lambda function failed..we can put in dlq(dead letter queue) after 5 retries

31. sqs fifo with lambda
    using sqs fifo..let say our lambda failed..because it's fifo..it will keep on retry
    we can this in dlq.so our next record will process